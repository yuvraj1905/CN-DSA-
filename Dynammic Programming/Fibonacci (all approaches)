
#include <bits/stdc++.h>
using namespace std;

// 1.recursive approach (complexity-O(2^n))
int fibo1(int n)
{
    if (n <= 1)
        return n;

    return fibo1(n - 1) + fibo1(n - 2);
}

// 2.Memoization approach (complexity - O(n))
int fibo2(int n, int *arr)
{
    if (n <= 1)
        return n;

    if (arr[n] != -1)
    {
        return arr[n];
    }
    int a = fibo2(n - 1, arr);
    int b = fibo2(n - 2, arr);

    arr[n] = a + b;
    return arr[n];
}

// 3. Dynammic Programming Approach (O(n))
int fibo3(int n)
{
    int *ans = new int[n + 1];
    ans[0] = 0;
    ans[1] = 1;
    for (int i = 2; i < n + 1; i++)
    {
        ans[i] = ans[i - 1] + ans[i - 2];
    }
    return ans[n];
}

int fibo2_helper(int n)
{
    int *arr = new int[n + 1];
    for (int i = 0; i <= n; i++)
    {
        arr[i] = -1;
    }
    return fibo2(n, arr);
}

int main()
{
    int n;
    cin >> n;
    cout << fibo1(n) << endl;
    cout << fibo2_helper(n) << endl;
    cout << fibo3(n) << endl;
}
